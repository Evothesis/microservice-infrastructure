#!/bin/bash
set -e

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Default environment
ENVIRONMENT=${1:-dev}

# Check for identity-only deployment flag
IDENTITY_ONLY=${2:-""}

echo "üöÄ Deploying Evothesis Analytics Platform v2 - Environment: $ENVIRONMENT"

# Load configuration
source "$SCRIPT_DIR/../configs/common.env"
source "$SCRIPT_DIR/../configs/${ENVIRONMENT}.env"

# Validate AWS CLI is configured
if ! aws sts get-caller-identity &>/dev/null; then
    echo "‚ùå AWS CLI not configured. Run 'aws configure' first."
    exit 1
fi

# Get AWS Account ID
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

echo "üìã Deployment Configuration:"
echo "  Environment: $ENVIRONMENT"
echo "  Region: $AWS_REGION"
echo "  Account: $AWS_ACCOUNT_ID"
echo "  Project: $PROJECT_NAME"
if [ "$IDENTITY_ONLY" = "--identity-only" ]; then
    echo "  Mode: Identity Resolution Components Only"
fi
echo ""

# Check if this is identity-only deployment
if [ "$IDENTITY_ONLY" = "--identity-only" ]; then
    echo "üîç Deploying ONLY Identity Resolution Components"
    echo "=============================================="
    echo ""
    
    # Deploy identity resolution tables
    echo "üìä Setting up identity resolution tables..."
    bash "$SCRIPT_DIR/setup-identity-tables.sh" "$ENVIRONMENT"
    echo ""
    
    # Deploy enrichment Lambda
    echo "üß† Deploying enrichment Lambda..."
    bash "$SCRIPT_DIR/setup-enrichment-lambda.sh" "$ENVIRONMENT"
    echo ""
    
    echo "‚úÖ Identity resolution deployment complete!"
    echo ""
    echo "üîó New Resources Created:"
    echo "  ‚Ä¢ evothesis-v2-identities-${ENVIRONMENT} (DynamoDB)"
    echo "  ‚Ä¢ evothesis-v2-sessions-${ENVIRONMENT} (DynamoDB)"
    echo "  ‚Ä¢ evothesis-analytics-v2-enriched-${ENVIRONMENT} (S3)"
    echo "  ‚Ä¢ evothesis-v2-enrichment-${ENVIRONMENT} (Lambda)"
    echo ""
    echo "üìù Next steps:"
    echo "  1. Test identity resolution with sample events"
    echo "  2. Monitor enrichment logs: aws logs tail /aws/lambda/evothesis-v2-enrichment-${ENVIRONMENT} --follow"
    echo "  3. Verify enriched events in S3: aws s3 ls s3://evothesis-analytics-v2-enriched-${ENVIRONMENT}/enriched-events/ --recursive"
    echo "  4. Set up CSV export automation"
    exit 0
fi

# Full deployment (existing + new components)
echo "üì¶ Full Infrastructure Deployment"
echo "================================="
echo ""

# Core Infrastructure (existing components)
echo "1Ô∏è‚É£ Setting up IAM roles..."
bash "$SCRIPT_DIR/setup-iam.sh" "$ENVIRONMENT"
echo ""

echo "2Ô∏è‚É£ Setting up DynamoDB..."
bash "$SCRIPT_DIR/setup-dynamodb.sh" "$ENVIRONMENT"
echo ""

echo "3Ô∏è‚É£ Setting up S3 buckets..."
bash "$SCRIPT_DIR/setup-s3.sh" "$ENVIRONMENT"
echo ""

echo "4Ô∏è‚É£ Setting up Lambda functions..."
bash "$SCRIPT_DIR/setup-lambda.sh" "$ENVIRONMENT"
echo ""

echo "5Ô∏è‚É£ Setting up API Gateway..."
bash "$SCRIPT_DIR/setup-api-gateway.sh" "$ENVIRONMENT"
echo ""

echo "6Ô∏è‚É£ Setting up hourly scheduler..."
bash "$SCRIPT_DIR/setup-scheduler.sh" "$ENVIRONMENT"
echo ""

# Identity Resolution Components (new components)
echo "7Ô∏è‚É£ Setting up identity resolution tables..."
bash "$SCRIPT_DIR/setup-identity-tables.sh" "$ENVIRONMENT"
echo ""

echo "8Ô∏è‚É£ Deploying enrichment Lambda..."
bash "$SCRIPT_DIR/setup-enrichment-lambda.sh" "$ENVIRONMENT"
echo ""

# Load final configuration
source "/tmp/${PROJECT_NAME}-${ENVIRONMENT}-api.env"

echo "üéâ Full Deployment Complete!"
echo "============================"
echo ""

# Display comprehensive resource summary
echo "üîó Core Resources:"
echo "  ‚Ä¢ API Endpoint: $API_ENDPOINT/collect"
echo "  ‚Ä¢ Environment: $ENVIRONMENT"
echo "  ‚Ä¢ Region: $AWS_REGION"
echo ""

echo "üìä DynamoDB Tables:"
aws dynamodb list-tables --query 'TableNames[?contains(@, `evothesis`)]' --output table --region "$AWS_REGION" 2>/dev/null || echo "  (Error listing tables)"
echo ""

echo "ü™£ S3 Buckets:"
aws s3 ls | grep evothesis | awk '{print "  ‚Ä¢ " $3}' || echo "  (Error listing buckets)"
echo ""

echo "‚ö° Lambda Functions:"
aws lambda list-functions --query 'Functions[?contains(FunctionName, `evothesis`)].FunctionName' --output table --region "$AWS_REGION" 2>/dev/null || echo "  (Error listing functions)"
echo ""

echo "üîÑ Event Processing Pipeline:"
echo "  1. JavaScript Pixel ‚Üí API Gateway ‚Üí Event Collector Lambda"
echo "  2. Event Collector ‚Üí DynamoDB (Raw Events)"
echo "  3. DynamoDB Streams ‚Üí Enrichment Lambda"
echo "  4. Enrichment Lambda ‚Üí Identity Resolution ‚Üí Enriched S3"
echo "  5. S3 Archiver ‚Üí Hourly Batched Archives"
echo ""

echo "üß™ Testing Commands:"
echo ""
echo "  Test raw event collection:"
echo "    curl -X POST $API_ENDPOINT/collect \\"
echo "      -H 'Content-Type: application/json' \\"
echo "      -d '{\"eventType\":\"pageview\",\"sessionId\":\"test-123\",\"visitorId\":\"test-456\",\"siteId\":\"test-site\"}'"
echo ""
echo "  Monitor enrichment processing:"
echo "    aws logs tail /aws/lambda/evothesis-v2-enrichment-${ENVIRONMENT} --follow"
echo ""
echo "  Check identity resolution results:"
echo "    aws dynamodb scan --table-name evothesis-v2-identities-${ENVIRONMENT} --limit 5"
echo ""
echo "  Verify enriched events in S3:"
echo "    aws s3 ls s3://evothesis-analytics-v2-enriched-${ENVIRONMENT}/enriched-events/ --recursive"
echo ""

echo "üìù Next Steps:"
echo "  1. Test the complete pipeline with sample events"
echo "  2. Monitor all processing stages in CloudWatch"
echo "  3. Verify identity resolution accuracy"
echo "  4. Set up CSV export automation to client buckets"
echo "  5. Configure Retool dashboard integration"
echo "  6. Set up monitoring and alerting"
echo ""

echo "üí∞ Cost Optimization Features:"
echo "  ‚Ä¢ All resources configured for pay-per-use pricing"
echo "  ‚Ä¢ ARM64 Lambda functions (20% cheaper than x86)"
echo "  ‚Ä¢ S3 lifecycle policies for automatic cost optimization"
echo "  ‚Ä¢ DynamoDB TTL for automatic data cleanup"
echo "  ‚Ä¢ Event batching to minimize Lambda invocations"
echo "  ‚Ä¢ Optimized memory allocation for all functions"
echo ""

echo "üîí Privacy & Compliance:"
echo "  ‚Ä¢ Cookieless tracking with device fingerprinting"
echo "  ‚Ä¢ GDPR/CCPA compliant data collection"
echo "  ‚Ä¢ HIPAA-ready infrastructure with encryption"
echo "  ‚Ä¢ No PII stored in identity resolution"
echo "  ‚Ä¢ Automatic data retention policies"
echo ""

echo "üìà Expected Monthly Costs (moderate traffic):"
echo "  ‚Ä¢ Development: ~$2-5/month"
echo "  ‚Ä¢ Production: ~$10-25/month (depends on event volume)"
echo "  ‚Ä¢ Cost scales linearly with usage"